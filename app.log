[2025-07-06 00:07:35,984] INFO __main__: Starting client!
[2025-07-06 00:07:36,722] INFO __main__: Available tools:
[2025-07-06 00:07:36,723] INFO __main__: 	 fetch_repository -> Clones a COBOL repository and registers it as a resource.
[2025-07-06 00:07:36,730] INFO __main__: 	 classify_repository -> Classifies files in a repository by programming language or file type.
[2025-07-06 00:07:36,730] INFO __main__: 	 processed_repository -> Returns a list of file from a processed repository by name.
[2025-07-06 00:07:36,730] INFO __main__: 	 extract_flow -> Extracts the execution flow of a program, starting from its primary entry point, and returns it in a structured JSON format.
[2025-07-06 00:07:36,730] INFO __main__: 	 get_map_files -> Returns a list of map files from a processed repository by name.
[2025-07-06 00:07:36,731] INFO __main__: 	 find_copy_definition -> Searches all files for a COBOL COPY label (e.g. DOGEDT) and returns the first file that contains it.
[2025-07-06 00:07:36,731] INFO __main__: 	 get_document_info -> Returns the information of a document.
[2025-07-06 00:07:36,731] INFO __main__: 	 return_workspace -> Returns the workspace file names.
[2025-07-06 00:07:36,731] INFO __main__: 	 file_classification -> Classifies file content by programming language or file type.
[2025-07-06 00:07:36,731] INFO __main__: 	 retrieve_file_content -> Retrieves the content of a file from the repository.
[2025-07-06 00:07:36,731] INFO __main__: 	 get_language_specific_prompt -> Returns the language-specific prompt for the given language.
[2025-07-06 00:07:36,731] INFO __main__: 	 extract_language_specific_flow -> Extracts the execution flow of a program, starting from its primary entry point, and returns it in a structured JSON format.
[2025-07-06 00:08:50,026] INFO __main__: Starting client!
[2025-07-06 00:08:50,742] INFO __main__: Available tools:
[2025-07-06 00:14:13,236] INFO __main__: Starting client!
[2025-07-06 00:14:13,956] INFO __main__: Available tools:
[2025-07-06 00:17:50,224] INFO __main__: Starting client!
[2025-07-06 00:20:46,574] INFO __main__: Starting client!
[2025-07-06 00:23:12,773] INFO __main__: Starting client!
[2025-07-06 00:25:27,829] INFO __main__: Starting client!
[2025-07-06 00:25:59,986] INFO __main__: Starting client!
[2025-07-06 00:27:07,784] INFO __main__: Starting client!
[2025-07-06 11:49:33,681] INFO __main__: Starting client!
[2025-07-06 11:55:49,361] INFO __main__: Starting client!
[2025-07-06 11:56:48,612] INFO __main__: Starting client!
[2025-07-06 11:57:08,478] INFO __main__: Starting client!
[2025-07-06 12:07:03,811] INFO __main__: Starting client!
[2025-07-06 12:08:08,714] INFO __main__: Starting client!
[2025-07-06 12:08:49,172] INFO __main__: Starting client!
[2025-07-06 12:10:37,465] INFO __main__: Starting client!
[2025-07-06 12:13:26,895] INFO __main__: Starting client!
[2025-07-06 12:21:36,821] INFO __main__: Starting client!
[2025-07-06 12:29:29,187] INFO __main__: Starting client!
[2025-07-06 12:32:20,857] INFO __main__: Starting client!
[2025-07-06 12:33:36,101] ERROR utils.mcp_tools_helper: Tool call 'MCP_Server_Language-Aware_Code_Analysis_Prompt' failed: 'GetPromptResult' object is not subscriptable
[2025-07-06 12:36:21,198] INFO __main__: Starting client!
[2025-07-06 12:37:34,693] INFO __main__: Starting client!
[2025-07-06 12:37:56,108] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 12:37:56,373] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `KICKS`, filename: `1`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `KICKS` and `1`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "1",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 12:37:56,373] ERROR utils.mcp_tools_helper: Tool call 'MCP_Server_Language-Aware_Code_Analysis_Prompt' failed: 'GetPromptResult' object is not subscriptable
[2025-07-06 12:43:01,538] INFO __main__: Starting client!
[2025-07-06 12:43:46,578] INFO __main__: Starting client!
[2025-07-06 12:47:07,734] INFO __main__: Starting client!
[2025-07-06 12:47:37,746] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 12:47:37,991] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICS`, filename: `DOGEMAIN`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICS` and `DOGEMAIN`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "DOGEMAIN",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 12:47:37,992] ERROR utils.mcp_tools_helper: Tool call 'MCP_Server_Language-Aware_Code_Analysis_Prompt' failed: 'GetPromptResult' object is not subscriptable
[2025-07-06 12:48:39,863] INFO __main__: Starting client!
[2025-07-06 12:49:09,180] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 12:49:09,181] INFO utils.mcp_tools_helper: Response: <coroutine object Client.get_prompt at 0x000001C213B535A0>
[2025-07-06 12:49:09,181] ERROR utils.mcp_tools_helper: Tool call 'MCP_Server_Language-Aware_Code_Analysis_Prompt' failed: 'coroutine' object is not subscriptable
[2025-07-06 12:50:39,163] INFO __main__: Starting client!
[2025-07-06 12:50:57,992] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 12:50:58,251] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICKS`, filename: `DOGEMAIN`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICKS` and `DOGEMAIN`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "DOGEMAIN",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 12:54:52,376] INFO __main__: Starting client!
[2025-07-06 12:55:13,991] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 12:55:14,271] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICKS`, filename: `DOGEMAIN`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICKS` and `DOGEMAIN`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "DOGEMAIN",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 13:01:47,922] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 13:01:48,186] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGEMAIN`, filename: `KICKS`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGEMAIN` and `KICKS`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "KICKS",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 16:46:38,008] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 16:46:38,269] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICS`, filename: `KICKS`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICS` and `KICKS`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "KICKS",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 16:47:46,368] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 16:47:46,629] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICS`, filename: `KICKS`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICS` and `KICKS`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "KICKS",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 16:47:50,684] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 16:47:50,688] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICS`, filename: `KICKS`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICS` and `KICKS`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "KICKS",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 16:49:51,615] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 16:49:51,886] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICS`, filename: `KICKS`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICS` and `KICKS`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "KICKS",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 16:50:00,206] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 16:50:00,470] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICS`, filename: `KICKS`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICS` and `KICKS`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "KICKS",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 16:52:06,561] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 16:52:06,824] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICS`, filename: `KICKS`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICS` and `KICKS`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "KICKS",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
[2025-07-06 16:52:16,809] INFO utils.mcp_tools_helper: Getting prompt MCP_Server_Language-Aware_Code_Analysis_Prompt
[2025-07-06 16:52:17,075] INFO utils.mcp_tools_helper: Response: meta=None description='Extracts the execution flow and external dependencies of any supported source code.' messages=[PromptMessage(role='user', content=TextContent(type='text', text='\n# MCP Server Language-Aware Code Analysis Prompt\n\n## System Instructions\n\nYou are a language-agnostic static code analyzer operating within the MCP Server.\n\n### Analysis Workflow\n\n1. **Identify Programming Language**\n   - Use the tool `get_document_info` with repository: `DOGECICS`, filename: `KICKS`\n   - This returns metadata including detected language (e.g., Python, COBOL, CLIST, C)\n\n2. **Retrieve Source Code**\n   - Use `retrieve_file_content` with `DOGECICS` and `KICKS`\n   - Assign the result to `source_code`\n\n3. **Language-Specific Analysis**\n   - Based on the detected language, invoke `get_language_specific_prompt(language, source_code, filename, repository_name)`\n   - Use the returned prompt template for that language to perform in-depth static analysis\n\n4. **Produce JSON Output**\n   - Output strictly valid JSON as per the language-agnostic schema:\n   \n```json\n{\n  "program_id": "unique program/module identifier",\n  "filename": "KICKS",\n  "language": "detected language",\n  "main_entry_points": ["entry points list"],\n  "flow_graph": [...],\n  "path_to_critical": [...]\n}\n', annotations=None))]
